<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.js.security</groupId>
  <artifactId>js-security</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  
  
   

  <name>js-security</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

<!-- 依赖管理和依赖是两码事，依赖管理是用来管理各种依赖的，如果不加dependencyManagement，直接写到dependencies里是没有效果的 -->
<dependencyManagement>
<dependencies>
  <!-- 这个io.spring.platform 是帮我们自动控制版本，我们不用写版本，只用写插件名字，使引入的各个插件的版本可以互相兼容 -->
  	<dependency>
            <groupId>io.spring.platform</groupId>
            <artifactId>platform-bom</artifactId>
            <version>Brussels-SR6</version>
            <type>pom</type>
            <scope>import</scope>
    </dependency>
    <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>Dalston.SR4</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
</dependencies>
</dependencyManagement>

<dependencies>
	<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <!--因为依赖管理中添加了版本自动控制，所以不用写版本<version>3.8.1</version>  --> 
      <scope>test</scope>
    </dependency>
</dependencies>
  
  
  <!-- 指定编译版本	源码JDK1.8 编译目标也是JDK1.8  编码UTF-8 -->
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<version>2.3.2</version>
  			<configuration>
  				<source>1.8</source>	
  				<target>1.8</target>
  				<encoding>UTF-8</encoding>
  			</configuration>
  		</plugin>
  	</plugins>
  </build>
  
  <!-- 引入其他Maven模块作为子模块，子模块继承父类的依赖管理dependencyManagement-->
  <!-- 添加完子模块后，子模块会报错，要右键这些子模块-》Maven-》Update Project  -->
  <modules>
  	<module>../js-security-app</module>
  	<module>../js-security-browser</module>
  	<module>../js-security-core</module>
  	<module>../js-security-demo</module>
  </modules>
</project>
